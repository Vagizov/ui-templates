<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:e5ui="http://efive.ru/uitemplates"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:c="http://java.sun.com/jsp/jstl/core"
      xmlns:composite="http://java.sun.com/jsf/composite">

    <h:head/>
    <h:body>
        <composite:interface>
            <composite:editableValueHolder name="dateEditor"/>

            <composite:attribute name="accesskey" shortDescription="Access key that, when pressed, transfers focus to this element."/>
            <composite:attribute name="alt" shortDescription="Alternate textual description of the element rendered by this component."/>
            <composite:attribute name="binding" shortDescription="The ValueExpression linking this component to a property in a backing bean"/>
            <composite:attribute name="buttonStyle" shortDescription="Style applied to date picker button"/>
            <composite:attribute name="buttonStyleClass" shortDescription="Css style class applied to date picker button"/>
            <composite:attribute name="dir" shortDescription="Direction indication for text that does not inherit directionality. Valid values are 'LTR' (left-to-right) and 'RTL' (right-to-left)."/>
            <composite:attribute name="disabled" type="java.lang.Boolean" shortDescription="Is the component will disabled"/>
            <composite:attribute name="disableEditor" type="java.lang.Boolean" shortDescription="If true then editor will be disabled and selection will allowed only by datepicker"/>
            <composite:attribute name="id" shortDescription="ID of composite component"/>
            <composite:attribute name="immediate" type="java.lang.Boolean" shortDescription="Identifies during which phase value change event should occur."/>
            <composite:attribute name="jsInitVar" default="{}" shortDescription="JS object or variable name to initialize date picker object"/>
            <composite:attribute name="lang" shortDescription="Code describing the language used in the generated markup for this component."/>
            <composite:attribute name="maxlength" shortDescription="The maximum number of characters that may be entered in this field."/>
            <composite:attribute name="onblur" shortDescription="Javascript code executed when this element loses focus."/>
            <composite:attribute name="onchange" shortDescription="Javascript code executed when this element loses focus and its value has been modified since gaining focus."/>
            <composite:attribute name="onclick" shortDescription="Javascript code executed when a pointer button is clicked over this element."/>
            <composite:attribute name="ondblclick" shortDescription="Javascript code executed when a pointer button is double clicked over this element."/>
            <composite:attribute name="onfocus" shortDescription="Javascript code executed when this element receives focus."/>
            <composite:attribute name="onkeydown" shortDescription="Javascript code executed when a key is pressed down over this element."/>
            <composite:attribute name="onkeypress" shortDescription="Javascript code executed when a key is pressed and released over this element."/>
            <composite:attribute name="onkeyup" shortDescription="Javascript code executed when a key is released over this element."/>
            <composite:attribute name="onmousedown" shortDescription="Javascript code executed when a pointer button is pressed down over this element."/>
            <composite:attribute name="onmousemove" shortDescription="Javascript code executed when a pointer button is moved within this element."/>
            <composite:attribute name="onmouseout" shortDescription="Javascript code executed when a pointer button is moved away from this element."/>
            <composite:attribute name="onmouseover" shortDescription="Javascript code executed when a pointer button is moved onto this element."/>
            <composite:attribute name="onmouseup" shortDescription="Javascript code executed when a pointer button is released over this element."/>
            <composite:attribute name="onselect" shortDescription="Javascript code executed when text within this element is selected by the user."/>
            <composite:attribute name="readonly" type="java.lang.Boolean" shortDescription="Is the component will be readonly"/>
            <composite:attribute name="required" type="java.lang.Boolean" shortDescription="Is the component value required"/>
            <composite:attribute name="size" shortDescription="The number of characters used to determine the width of this field."/>
            <composite:attribute name="style" shortDescription="Style applied to date editor"/>
            <composite:attribute name="styleClass" shortDescription="Css style class applied to date editor"/>
            <composite:attribute name="tabindex" shortDescription="Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767."/>
            <composite:attribute name="title" shortDescription="Advisory title information about markup elements generated for this component."/>
            <composite:attribute name="validator" shortDescription="MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void."/>
            <composite:attribute name="validatorMessage" shortDescription="A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator."/>
            <composite:attribute name="value" shortDescription="Value for editing"/>
            <composite:attribute name="valueChangeListener" shortDescription="MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a ValueChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that 'this value changed'."/>
        </composite:interface>
        <composite:implementation>
            <h:outputStylesheet library="e5ui/css" name="datepicker.css" target="head" />

            <h:outputScript library="e5ui/js" name="jquery.js" target="head" />
            <h:outputScript library="e5ui/js" name="datepicker.js" target="head" />
            <h:outputScript library="e5ui/js" name="jquery.maskedinput.js" target="head" />
            <h:outputScript library="e5ui/js" name="datepicker.i18n.js" target="head" />

            <span style="white-space: nowrap;">
                <h:inputText disabled="#{cc.attrs.disabled}"
                             id="dateEditor"
                             immediate="#{cc.attrs.immediate}"
                             readonly="#{cc.attrs.readonly}"
                             required="#{cc.attrs.required}"
                             value="#{cc.attrs.value}">

                    <c:if test="#{not empty cc.attrs.accesskey}"><f:attribute name="accesskey" value="#{cc.attrs.accesskey}"/></c:if>
                    <c:if test="#{not empty cc.attrs.alt}"><f:attribute name="alt" value="#{cc.attrs.alt}"/></c:if>
                    <c:if test="#{not empty cc.attrs.binding}"><f:attribute name="binding" value="#{cc.attrs.binding}"/></c:if>
                    <c:if test="#{not empty cc.attrs.dir}"><f:attribute name="dir" value="#{cc.attrs.dir}"/></c:if>
                    <c:if test="#{not empty cc.attrs.lang}"><f:attribute name="lang" value="#{cc.attrs.lang}"/></c:if>
                    <c:if test="#{not empty cc.attrs.maxlength}"><f:attribute name="maxlength" value="#{cc.attrs.maxlength}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onblur}"><f:attribute name="onblur" value="#{cc.attrs.onblur}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onchange}"><f:attribute name="onchange" value="#{cc.attrs.onchange}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onclick}"><f:attribute name="onclick" value="#{cc.attrs.onclick}"/></c:if>
                    <c:if test="#{not empty cc.attrs.ondblclick}"><f:attribute name="ondblclick" value="#{cc.attrs.ondblclick}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onfocus}"><f:attribute name="onfocus" value="#{cc.attrs.onfocus}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onkeydown}"><f:attribute name="onkeydown" value="#{cc.attrs.onkeydown}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onkeypress}"><f:attribute name="onkeypress" value="#{cc.attrs.onkeypress}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onkeyup}"><f:attribute name="onkeyup" value="#{cc.attrs.onkeyup}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onmousedown}"><f:attribute name="onmousedown" value="#{cc.attrs.onmousedown}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onmousemove}"><f:attribute name="onmousemove" value="#{cc.attrs.onmousemove}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onmouseout}"><f:attribute name="onmouseout" value="#{cc.attrs.onmouseout}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onmouseover}"><f:attribute name="onmouseover" value="#{cc.attrs.onmouseover}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onmouseup}"><f:attribute name="onmouseup" value="#{cc.attrs.onmouseup}"/></c:if>
                    <c:if test="#{not empty cc.attrs.onselect}"><f:attribute name="onselect" value="#{cc.attrs.onselect}"/></c:if>
                    <c:if test="#{not empty cc.attrs.size}"><f:attribute name="size" value="#{cc.attrs.size}"/></c:if>
                    <c:if test="#{not empty cc.attrs.style}"><f:attribute name="style" value="#{cc.attrs.style}"/></c:if>
                    <c:if test="#{not empty cc.attrs.styleClass}"><f:attribute name="styleClass" value="#{cc.attrs.styleClass}"/></c:if>
                    <c:if test="#{not empty cc.attrs.tabindex}"><f:attribute name="tabindex" value="#{cc.attrs.tabindex}"/></c:if>
                    <c:if test="#{not empty cc.attrs.title}"><f:attribute name="title" value="#{cc.attrs.title}"/></c:if>
                    <c:if test="#{not empty cc.attrs.validator}"><f:attribute name="validator" value="#{cc.attrs.validator}"/></c:if>
                    <c:if test="#{not empty cc.attrs.validatorMessage}"><f:attribute name="validatorMessage" value="#{cc.attrs.validatorMessage}"/></c:if>
                    <c:if test="#{not empty cc.attrs.valueChangeListener}"><f:attribute name="valueChangeListener" value="#{cc.attrs.valueChangeListener}"/></c:if>

                    <f:convertDateTime for="dateEditor" pattern="dd.MM.yyyy"/>
                    <composite:insertChildren/>
                </h:inputText>&nbsp;
                <h:commandButton
                        id="calendarButton"
                        styleClass="e5ui-inputDate-button #{cc.attrs.disabled or cc.attrs.readonly ? 'disabled' : ''} #{cc.attrs.buttonStyleClass}"
                        style="#{cc.attrs.buttonStyle}"
                        value="&nbsp;"/>

                <c:set var="e5ui_date_input_figQuotes" value="{}"/>
                <c:choose>
                    <c:when test="#{cc.attrs.jsInitVar eq e5ui_date_input_figQuotes}">
                        <c:set var="jsInitVar" value="e5ui_inputDate_options_#{cc.attrs.lang}"/>
                    </c:when>
                    <c:otherwise>
                        <c:set var="jsInitVar" value="jsInitVar"/>
                    </c:otherwise>
                </c:choose>

                <script type="text/javascript">
                    jQuery(function($){
                        var editorIdSelector = "##{cc.clientId.replaceAll(':', '\\\\\\\\:')}\\:dateEditor";
                        var buttonIdSelector = "##{cc.clientId.replaceAll(':', '\\\\\\\\:')}\\:calendarButton";

                        #{cc.attrs.disableEditor? '$(editorIdSelector).attr("readonly", true)': '$(editorIdSelector).mask("99.99.9999");'}
                        $(buttonIdSelector).DatePicker($.extend({}, #{jsInitVar}, {
                            format: "d.m.Y",
                            date: $(editorIdSelector).val(),
                            onChange: function(formatted, dates) {
                                $(editorIdSelector).val(formatted);
                                $(buttonIdSelector).DatePickerHide();
                            }
                        }));
                    });
                </script>
            </span>
        </composite:implementation>
    </h:body>
</html>